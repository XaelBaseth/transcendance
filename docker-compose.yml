services:
  db:
    container_name: db
    image: postgres
    restart: always
    env_file:
      - .env
    networks:
      - main
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}"]
      interval: 5s
      retries: 3
      timeout: 5s

  django:
    container_name: django
    depends_on:
      db:
        condition: service_healthy
    build:
      context: ./
      dockerfile: ./backend/Dockerfile
    restart: always
    networks:
      - main
    healthcheck:
      test: ["CMD-SHELL", "curl localhost:8000/api/ || exit 1"]
      interval: 3s
      timeout: 10s
      retries: 3
    env_file: .env

  nginx:
    container_name: nginx
    env_file: .env
    depends_on:
      django:
        condition: service_healthy
    build:
      context: ./build
      dockerfile: Dockerfile
    ports:
      - '8000:8000'
    restart: always
    networks:
      - main
    volumes:
      - /var/www/html
    healthcheck:
      test: ["CMD-SHELL", "curl -fk https://localhost:8000/ || exit 1"]
      interval: 3s
      timeout: 10s
      retries: 3

  vault:
    image: hashicorp/vault:1.16
    container_name: vault
    environment:
      - VAULT_ADDR=${VAULT_ADDR}
    ports:
      - 8200:8200
    restart: always
    volumes:
      - ./vault/vault-config.hcl:/vault/config/config.hcl
      - vault-data:/vault/file
    cap_add:
      - IPC_LOCK
    command: server
    
  vault-init:
    image: hashicorp/vault:1.16
    container_name: vault-init
    environment:
      - VAULT_ADDR=${VAULT_INIT_ADDR}
      - MY_VAULT_TOKEN=${MY_VAULT_TOKEN}
    volumes:
      - ./vault/vault-root-token:/vault/file/vault-root-token
      - ./vault/vault-init.sh:/usr/local/bin/vault-init.sh
      - vault-data:/vault/file/
    command: /usr/local/bin/vault-init.sh
    restart: on-failure
    depends_on:
      - vault

networks:
  main:
    name: main
    driver: bridge

volumes:
  vault-data:
